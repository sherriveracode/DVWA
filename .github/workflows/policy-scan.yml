# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: Policy Scan PHP/Javascript

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  zip-and-scan:

    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # Make java accessible on path so the uploadandscan action can run.
#     - name: Set up JDK 1.8
#       uses: actions/setup-java@v1
#       with:
#         java-version: 1.8
    # zip the project and send to staging directory
    - name: Zip Project
      run: zip -R project.zip '*.py' '*.js' '*.php' '*.ts' 'requirements.txt'
      env:
        build-name: project.zip
    - uses: actions/upload-artifact@v2 # Copy files from repository to docker container so the next uploadandscan action can access them.
      with:
        path: project.zip # Wildcards can be used to filter the files copied into the container. See: https://github.com/actions/upload-artifact
    - uses: veracode/veracode-uploadandscan-action@master # Run the uploadandscan action. Inputs are described above.
      with:
        appname: 'DVWA'
        filepath: 'project.zip'
        vid: '${{ secrets.VERACODE_API_ID }}'
        vkey: '${{ secrets.VERACODE_API_KEY }}'
        createsandbox: 'true'
        sandboxname: 'Github - ${{ github.ref }}'
#         scantimeout: 15
        # set scantimeout only if you want to wait for results and fail the build
